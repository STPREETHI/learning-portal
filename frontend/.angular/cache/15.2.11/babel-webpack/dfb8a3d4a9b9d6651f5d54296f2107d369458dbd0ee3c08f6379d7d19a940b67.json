{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./api.service\";\nexport let GeminiService = /*#__PURE__*/(() => {\n  class GeminiService {\n    http;\n    apiService;\n    API_BASE_URL = 'http://localhost:5001/api';\n    constructor(http, apiService) {\n      this.http = http;\n      this.apiService = apiService;\n    }\n    handleError(error) {\n      const errorMessage = error.error?.message || error.statusText || 'An unknown AI service error occurred';\n      return throwError(() => new Error(errorMessage));\n    }\n    generateQuizFromText(textContent, numQuestions) {\n      return this.http.post(`${this.API_BASE_URL}/ai/generate-quiz`, {\n        textContent,\n        numQuestions\n      }, {\n        headers: this.apiService.getAuthHeaders()\n      }).pipe(map(response => response.questions), catchError(this.handleError));\n    }\n    generatePerformanceReview(questions, userAnswers, score) {\n      return this.http.post(`${this.API_BASE_URL}/ai/generate-review`, {\n        questions,\n        userAnswers,\n        score\n      }, {\n        headers: this.apiService.getAuthHeaders()\n      }).pipe(map(response => response.review), catchError(this.handleError));\n    }\n    static ɵfac = function GeminiService_Factory(t) {\n      return new (t || GeminiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApiService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GeminiService,\n      factory: GeminiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GeminiService;\n})();","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAOhD,WAAaC,aAAa;EAApB,MAAOA,aAAa;IAIJC;IAA0BC;IAFtCC,YAAY,GAAG,2BAA2B;IAElDC,YAAoBH,IAAgB,EAAUC,UAAsB;MAAhD,SAAI,GAAJD,IAAI;MAAsB,eAAU,GAAVC,UAAU;IAAgB;IAEhEG,WAAW,CAACC,KAAU;MAC5B,MAAMC,YAAY,GAAGD,KAAK,CAACA,KAAK,EAAEE,OAAO,IAAIF,KAAK,CAACG,UAAU,IAAI,sCAAsC;MACvG,OAAOZ,UAAU,CAAC,MAAM,IAAIa,KAAK,CAACH,YAAY,CAAC,CAAC;IAClD;IAEAI,oBAAoB,CAACC,WAAmB,EAAEC,YAAoB;MAC5D,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAA4B,GAAG,IAAI,CAACX,YAAY,mBAAmB,EAAE;QAAES,WAAW;QAAEC;MAAY,CAAE,EAAE;QAAEE,OAAO,EAAE,IAAI,CAACb,UAAU,CAACc,cAAc;MAAE,CAAE,CAAC,CACpKC,IAAI,CACHlB,GAAG,CAACmB,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAAC,EACnCrB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAC7B;IACL;IAEAe,yBAAyB,CAACD,SAAqB,EAAEE,WAAqB,EAAEC,KAAa;MACnF,OAAO,IAAI,CAACrB,IAAI,CAACa,IAAI,CAAqB,GAAG,IAAI,CAACX,YAAY,qBAAqB,EAAE;QAAEgB,SAAS;QAAEE,WAAW;QAAEC;MAAK,CAAE,EAAE;QAAEP,OAAO,EAAE,IAAI,CAACb,UAAU,CAACc,cAAc;MAAE,CAAE,CAAC,CACnKC,IAAI,CACHlB,GAAG,CAACmB,QAAQ,IAAIA,QAAQ,CAACK,MAAM,CAAC,EAChCzB,UAAU,CAAC,IAAI,CAACO,WAAW,CAAC,CAC7B;IACL;;uBAzBWL,aAAa;IAAA;;aAAbA,aAAa;MAAAwB,SAAbxB,aAAa;MAAAyB,YAFZ;IAAM;;SAEPzB,aAAa;AAAA","names":["throwError","catchError","map","GeminiService","http","apiService","API_BASE_URL","constructor","handleError","error","errorMessage","message","statusText","Error","generateQuizFromText","textContent","numQuestions","post","headers","getAuthHeaders","pipe","response","questions","generatePerformanceReview","userAnswers","score","review","factory","providedIn"],"sourceRoot":"","sources":["D:\\learning-portal\\frontend\\src\\app\\services\\gemini.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Question } from '../types';\r\nimport { ApiService } from './api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GeminiService {\r\n\r\n  private API_BASE_URL = 'http://localhost:5001/api';\r\n\r\n  constructor(private http: HttpClient, private apiService: ApiService) { }\r\n\r\n  private handleError(error: any) {\r\n    const errorMessage = error.error?.message || error.statusText || 'An unknown AI service error occurred';\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  generateQuizFromText(textContent: string, numQuestions: number): Observable<Question[]> {\r\n    return this.http.post<{ questions: Question[] }>(`${this.API_BASE_URL}/ai/generate-quiz`, { textContent, numQuestions }, { headers: this.apiService.getAuthHeaders() })\r\n      .pipe(\r\n        map(response => response.questions),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  generatePerformanceReview(questions: Question[], userAnswers: string[], score: number): Observable<string> {\r\n    return this.http.post<{ review: string }>(`${this.API_BASE_URL}/ai/generate-review`, { questions, userAnswers, score }, { headers: this.apiService.getAuthHeaders() })\r\n      .pipe(\r\n        map(response => response.review),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}