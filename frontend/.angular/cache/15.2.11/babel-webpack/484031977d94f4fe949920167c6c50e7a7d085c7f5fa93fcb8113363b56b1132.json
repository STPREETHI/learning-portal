{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    API_BASE_URL = environment.apiUrl;\n    constructor(http) {\n      this.http = http;\n    }\n    getAuthHeaders() {\n      const token = localStorage.getItem('token');\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n    }\n    handleError(error) {\n      const errorMessage = error.error?.message || error.statusText || 'An unknown error occurred';\n      return throwError(() => new Error(errorMessage));\n    }\n    // --- Authentication ---\n    login(name, pass) {\n      return this.http.post(`${this.API_BASE_URL}/auth/login`, {\n        name,\n        password: pass\n      }).pipe(map(response => {\n        localStorage.setItem('token', response.token);\n        return response;\n      }), catchError(this.handleError));\n    }\n    register(name, pass, role) {\n      return this.http.post(`${this.API_BASE_URL}/auth/register`, {\n        name,\n        password: pass,\n        role\n      }).pipe(map(response => {\n        localStorage.setItem('token', response.token);\n        return response;\n      }), catchError(this.handleError));\n    }\n    fetchInitialData() {\n      return this.http.get(`${this.API_BASE_URL}/classrooms/initial-data`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // --- Classroom Management ---\n    createClassroom(name, description) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms`, {\n        name,\n        description\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    joinClassroom(code) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/join`, {\n        code\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    approveJoinRequest(classroomId, wardId) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/approve`, {\n        wardId\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // --- Content Management ---\n    addQuizToClassroom(classroomId, quizData) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/quizzes`, quizData, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    addAssignmentToClassroom(classroomId, assignmentData) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments`, assignmentData, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    submitQuiz(classroomId, quizId, submission) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/quizzes/${quizId}/submit`, submission, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    submitAssignment(classroomId, assignmentId, submission) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments/${assignmentId}/submit`, submission, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    gradeAssignment(classroomId, assignmentId, wardId, grade, feedback) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments/${assignmentId}/grade`, {\n        wardId,\n        grade,\n        feedback\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateAttendance(classroomId, record) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/attendance`, record, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    static ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","map","environment","ApiService","http","API_BASE_URL","apiUrl","constructor","getAuthHeaders","token","localStorage","getItem","handleError","error","errorMessage","message","statusText","Error","login","name","pass","post","password","pipe","response","setItem","register","role","fetchInitialData","get","headers","createClassroom","description","joinClassroom","code","approveJoinRequest","classroomId","wardId","addQuizToClassroom","quizData","addAssignmentToClassroom","assignmentData","submitQuiz","quizId","submission","submitAssignment","assignmentId","gradeAssignment","grade","feedback","updateAttendance","record","factory","providedIn"],"sourceRoot":"","sources":["D:\\learning-portal\\frontend\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { User, UserRole, Classroom, Quiz, Assignment, WardSubmission, AssignmentSubmission, AttendanceRecord } from '../types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  private API_BASE_URL = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n  \r\n  public getAuthHeaders(): HttpHeaders {\r\n    const token = localStorage.getItem('token');\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n  \r\n  private handleError(error: any) {\r\n    const errorMessage = error.error?.message || error.statusText || 'An unknown error occurred';\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  // --- Authentication ---\r\n  login(name: string, pass: string): Observable<{ token: string, user: User }> {\r\n    return this.http.post<{ token: string, user: User }>(`${this.API_BASE_URL}/auth/login`, { name, password: pass })\r\n      .pipe(\r\n        map(response => {\r\n          localStorage.setItem('token', response.token);\r\n          return response;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  register(name: string, pass: string, role: UserRole): Observable<{ token: string, user: User }> {\r\n    return this.http.post<{ token: string, user: User }>(`${this.API_BASE_URL}/auth/register`, { name, password: pass, role })\r\n      .pipe(\r\n        map(response => {\r\n          localStorage.setItem('token', response.token);\r\n          return response;\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  fetchInitialData(): Observable<{ classrooms: Classroom[], allWards: User[] }> {\r\n    return this.http.get<{ classrooms: Classroom[], allWards: User[] }>(`${this.API_BASE_URL}/classrooms/initial-data`, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // --- Classroom Management ---\r\n  createClassroom(name: string, description: string): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms`, { name, description }, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  joinClassroom(code: string): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/join`, { code }, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  approveJoinRequest(classroomId: string, wardId: string): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/approve`, { wardId }, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // --- Content Management ---\r\n  addQuizToClassroom(classroomId: string, quizData: Omit<Quiz, 'id' | 'submissions'>): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/quizzes`, quizData, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addAssignmentToClassroom(classroomId: string, assignmentData: Omit<Assignment, 'id' | 'submissions'>): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments`, assignmentData, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  submitQuiz(classroomId: string, quizId: string, submission: Omit<WardSubmission, 'wardId'>): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/quizzes/${quizId}/submit`, submission, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n  \r\n  submitAssignment(classroomId: string, assignmentId: string, submission: Omit<AssignmentSubmission, 'wardId'>): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments/${assignmentId}/submit`, submission, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  gradeAssignment(classroomId: string, assignmentId: string, wardId: string, grade: number, feedback: string): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments/${assignmentId}/grade`, { wardId, grade, feedback }, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  updateAttendance(classroomId: string, record: AttendanceRecord): Observable<Classroom> {\r\n    return this.http.post<Classroom>(`${this.API_BASE_URL}/classrooms/${classroomId}/attendance`, record, { headers: this.getAuthHeaders() })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}