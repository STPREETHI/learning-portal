{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    API_BASE_URL = environment.apiUrl;\n    constructor(http) {\n      this.http = http;\n    }\n    getAuthHeaders() {\n      const token = localStorage.getItem('token');\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n    }\n    handleError(error) {\n      const errorMessage = error.error?.message || error.statusText || 'An unknown error occurred';\n      return throwError(() => new Error(errorMessage));\n    }\n    // --- Authentication ---\n    login(name, pass) {\n      return this.http.post(`${this.API_BASE_URL}/auth/login`, {\n        name,\n        password: pass\n      }).pipe(map(response => {\n        localStorage.setItem('token', response.token);\n        return response;\n      }), catchError(this.handleError));\n    }\n    register(name, pass, role) {\n      return this.http.post(`${this.API_BASE_URL}/auth/register`, {\n        name,\n        password: pass,\n        role\n      }).pipe(map(response => {\n        localStorage.setItem('token', response.token);\n        return response;\n      }), catchError(this.handleError));\n    }\n    fetchInitialData() {\n      return this.http.get(`${this.API_BASE_URL}/classrooms/initial-data`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // --- Classroom Management ---\n    createClassroom(name, description) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms`, {\n        name,\n        description\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    joinClassroom(code) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/join`, {\n        code\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    approveJoinRequest(classroomId, wardId) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/approve`, {\n        wardId\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // --- Content Management ---\n    addQuizToClassroom(classroomId, quizData) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/quizzes`, quizData, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    addAssignmentToClassroom(classroomId, assignmentData) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments`, assignmentData, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    submitQuiz(classroomId, quizId, submission) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/quizzes/${quizId}/submit`, submission, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    submitAssignment(classroomId, assignmentId, submission) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments/${assignmentId}/submit`, submission, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    gradeAssignment(classroomId, assignmentId, wardId, grade, feedback) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/assignments/${assignmentId}/grade`, {\n        wardId,\n        grade,\n        feedback\n      }, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateAttendance(classroomId, record) {\n      return this.http.post(`${this.API_BASE_URL}/classrooms/${classroomId}/attendance`, record, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    static ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}