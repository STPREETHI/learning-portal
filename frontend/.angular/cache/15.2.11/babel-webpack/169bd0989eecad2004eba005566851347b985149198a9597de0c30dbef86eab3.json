{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./api.service\";\nexport let GeminiService = /*#__PURE__*/(() => {\n  class GeminiService {\n    http;\n    apiService;\n    API_BASE_URL = 'http://localhost:5001/api';\n    constructor(http, apiService) {\n      this.http = http;\n      this.apiService = apiService;\n    }\n    handleError(error) {\n      const errorMessage = error.error?.message || error.statusText || 'An unknown AI service error occurred';\n      return throwError(() => new Error(errorMessage));\n    }\n    generateQuizFromText(textContent, numQuestions) {\n      return this.http.post(`${this.API_BASE_URL}/ai/generate-quiz`, {\n        textContent,\n        numQuestions\n      }, {\n        headers: this.apiService.getAuthHeaders()\n      }).pipe(map(response => response.questions), catchError(this.handleError));\n    }\n    generatePerformanceReview(questions, userAnswers, score) {\n      return this.http.post(`${this.API_BASE_URL}/ai/generate-review`, {\n        questions,\n        userAnswers,\n        score\n      }, {\n        headers: this.apiService.getAuthHeaders()\n      }).pipe(map(response => response.review), catchError(this.handleError));\n    }\n    static ɵfac = function GeminiService_Factory(t) {\n      return new (t || GeminiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApiService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GeminiService,\n      factory: GeminiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GeminiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}